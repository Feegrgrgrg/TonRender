from aiogram import Bot, Dispatcher, types
from config import CHANNEL_USERNAME, TOKEN
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import aiogram.utils.markdown as fmt
import sqlite3


bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

conn = sqlite3.connect('users.db')
c = conn.cursor()


async def post_to_channel(message: str, username: str, user_id: int, amount: int):
    rounded_amount = round(amount, 2)
    try:
        if username:
            await bot.send_message(
    chat_id=CHANNEL_USERNAME, 
    text=fmt.text(
        f'''
–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –æ–ø–ª–∞—Ç–∞‚ùó

<i>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</i> <code>@{username}</code>
<i>ID:</i> <code>{user_id}</code>
<i>–°—É–º–º–∞:</i> <code>{rounded_amount}$</code>
        '''
    ),
    parse_mode="HTML"
)


    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª: {e}")



async def check_captcha(input_text, captcha_text):
    return input_text.upper() == captcha_text.upper()


async def check_subscription(chat_id: int):
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=chat_id)
        return member.status in ['member', 'administrator', 'creator']
    except Exception:
        return False
    

async def is_admin(user_id: int):
    member = await bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user_id)
    return member.status in ['administrator', 'creator']



async def send_options_menu(message: types.Message):
    if await check_subscription(message.chat.id):
        c.execute("SELECT free_draws FROM users WHERE id=?", (message.chat.id,))
        free_draws = c.fetchone()[0]
        markup = InlineKeyboardMarkup()
        button = InlineKeyboardButton(text="TON", callback_data='TON')
        button1 = InlineKeyboardButton(text="üíµ–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data='balance')
        markup.row(button)
        markup.row(button1)
        await message.answer(f'''
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Ä–∏—Å–æ–≤–æ–∫: {free_draws}

–í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é –Ω–∏–∂–µ:''', reply_markup=markup)
    else:
        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.üôè', reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª', url=f'https://t.me/{CHANNEL_USERNAME[1:]}'),
            InlineKeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data='check_subscription')
        ))
