from aiogram import types, Bot
import sqlite3
from database import add_user_to_db
from aiogram import Dispatcher
from config import TOKEN
from bot import is_admin, send_options_menu, post_to_channel
from bot import generate_random_text, check_captcha
from datetime import datetime, timedelta
from captcha.image import ImageCaptcha
import asyncio
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from bot import check_subscription
from config import CHANNEL_USERNAME
from bot import main2, create_invoice, check_invoice_payment
from bot import abbreviations
from PIL import Image, ImageFont, ImageDraw
import os
import aiogram.utils.markdown as fmt



bot = Bot(token=TOKEN)
dp = Dispatcher(bot)



conn = sqlite3.connect('users.db')
c = conn.cursor()

user_captcha = {}
user_data = {}

@dp.message_handler(commands=['admin'])
async def admin_command(message: types.Message):
    user_id = message.from_user.id
    args = message.text.split()
    if await is_admin(user_id):
        if len(args) == 1:

            conn = sqlite3.connect('users.db')
            cursor = conn.cursor()
            cursor.execute('SELECT id, username, free_draws FROM users')
            users = cursor.fetchall()
            conn.close()

            if users:
                response = "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É:\n /admin  id  –∫–æ–ª-–≤–æ –æ—Ç—Ä–∏—Å–æ–≤–æ–∫ \n"

            else:
                response = "No users found."

            await message.reply(response)
        elif len(args) == 3:
            try:
                user_id = int(args[1])
                draws_to_add = int(args[2])
            except ValueError:
                await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin id –∫–æ–ª-–≤–æ –æ—Ç—Ä–∏—Å–æ–≤–æ–∫")
                return

            conn = sqlite3.connect('users.db')
            cursor = conn.cursor()

            cursor.execute('SELECT username, free_draws FROM users WHERE id = ?', (user_id,))
            user = cursor.fetchone()

            if user:
                new_free_draws = user[1] + draws_to_add
                cursor.execute('UPDATE users SET free_draws = ? WHERE id = ?', (new_free_draws, user_id))
                conn.commit()
                conn.close()
                await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user[0]} –∏–º–µ–µ—Ç {new_free_draws} –æ—Ç—Ä–∏—Å–æ–≤–æ–∫")
            else:
                conn.close()
                await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:
            await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin id –∫–æ–ª-–≤–æ –æ—Ç—Ä–∏—Å–æ–≤–æ–∫")
    else:
        await bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è. /start')
        
        
        
@dp.message_handler(commands=['draws'])
async def start(message: types.Message):
    user = message.from_user
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –æ—Ç—Ä–∏—Å–æ–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    c.execute("SELECT free_draws FROM users WHERE id=?", (message.chat.id,))
    free_draws = c.fetchone()[0]
    
    c.execute("SELECT last_scan_time FROM users WHERE id=?", (user.id,))
    last_scan_time_str = c.fetchone()[0]

    if last_scan_time_str:
        last_scan_time = datetime.fromisoformat(last_scan_time_str)
    else:
        last_scan_time = None

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    current_time = datetime.now()

    if last_scan_time is None or (current_time - last_scan_time) >= timedelta(days=1):
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        last_scan_time = current_time
        c.execute("UPDATE users SET last_scan_time=? WHERE id=?", (last_scan_time.isoformat(), user.id))
        conn.commit()
        print("–í—Ä–µ–º—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ.")
    else:
        print("–í—Ä–µ–º—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞.")
    
    rounded_last_scan_time = last_scan_time.strftime('%H:%M:%S')
    await message.answer(f'''
–£ –≤–∞—Å –¥–æ—Å—Ç—É–ø–Ω–æ {free_draws} –æ—Ç—Ä–∏—Å–æ–≤–æ–∫.

–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –∑–∞–≤—Ç—Ä–∞ –≤: {rounded_last_scan_time}''')
    
    
    
@dp.message_handler(commands=['start'])
async def start1(message: types.Message):
    user = message.from_user

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    c.execute("SELECT id FROM users WHERE id=?", (user.id,))
    user_in_db = c.fetchone()

    if user_in_db:
        c.execute("SELECT free_draws, last_scan_time FROM users WHERE id=?", (user.id,))
        user_data = c.fetchone()
        
        if user_data:
            free_draws, last_scan_time_str = user_data
            
            if last_scan_time_str:
                
                last_scan_time = datetime.fromisoformat(last_scan_time_str)
            else:
                last_scan_time = None

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            current_time = datetime.now()

            if last_scan_time is None or (current_time - last_scan_time) >= timedelta(days=1):
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                last_scan_time = current_time
                c.execute("UPDATE users SET last_scan_time=?, free_draws=? WHERE id=?", 
                          (last_scan_time.isoformat(), free_draws + 1, user.id))
                conn.commit()
                print("–í—Ä–µ–º—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ.")
                await message.answer("–í—Ä–µ–º—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –æ—Ç—Ä–∏—Å–æ–≤–∫–∏")
            else:
                print("–í—Ä–µ–º—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞.")

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞–ø—á—É
        await send_options_menu(message)
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        await add_user_to_db(user)

        if last_scan_time is None or (current_time - last_scan_time) >= timedelta(days=1):
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            last_scan_time = current_time
            c.execute("UPDATE users SET last_scan_time=?, free_draws=? WHERE id=?", 
                      (last_scan_time.isoformat(), free_draws + 1, user.id))
            conn.commit()
            print("–í—Ä–µ–º—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ.")
            await message.answer("–í—Ä–µ–º—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –æ—Ç—Ä–∏—Å–æ–≤–∫–∏")
        else:
            print("–í—Ä–µ–º—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞.")
        
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –æ—Ç—Ä–∏—Å–æ–≤–æ–∫ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        c.execute("SELECT free_draws FROM users WHERE id=?", (user.id,))
        free_draws = c.fetchone()[0]

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–ø—á–∏
        captcha_text = generate_random_text()
        print(f'–¢–µ–∫—Å—Ç –∫–∞–ø—á–∏: {captcha_text}')
        image = ImageCaptcha(width=280, height=90)
        captcha_image = image.generate_image(captcha_text)
        captcha_image_file = "captcha_image.png"
        captcha_image.save(captcha_image_file)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–ø—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        with open(captcha_image_file, "rb") as photo:
            await bot.send_photo(message.chat.id, photo, caption='–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–æ—Ç–∞:')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–∞–ø—á–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_captcha[message.chat.id] = captcha_text
        
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler(content_types=types.ContentType.TEXT)
async def handle_message(message: types.Message):
    if message.chat.id in user_captcha:
        captcha_text = user_captcha[message.chat.id]
        if await check_captcha(message.text, captcha_text):
            await asyncio.sleep(2)
            await bot.send_message(message.chat.id, "‚úÖ")
            await send_options_menu(message)
            # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –∫–∞–ø—á–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            del user_captcha[message.chat.id]
        else:
            await message.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–ø—á–∏.')
            return
    else:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –Ω–∞—á–∞–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π
        if message.text.startswith('/start'):
            await start(message)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ —Ñ–æ—Ä–º–∞—Ç
        text = [line.strip() for line in message.text.split("\n")]
        if len(text) != 4:
            print('11–≥–≤')
            return
        
        await bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ QR-–∫–æ–¥–∞.üñ•')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data[message.chat.id] = {
            'time': text[0],
            'coin': text[1],
            'pricetime': text[2],
            'x': text[3]
        }

@dp.callback_query_handler() 
async def process_callback_query(call: types.CallbackQuery):
    chat_id = call.message.chat.id
    payment_url = None
    
    if await check_subscription(chat_id):
        print(2)
    else:
        await bot.send_message(chat_id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.üôè', reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª', url=f'https://t.me/{CHANNEL_USERNAME[1:]}'),
            InlineKeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data='check_subscription')
        ))
    
    if call.data == 'Try':
        c.execute("SELECT free_draws FROM users WHERE id=?", (chat_id,))
        free_draws = c.fetchone()[0]
        
        c.execute("SELECT last_scan_time FROM users WHERE id=?", (chat_id,))
        last_scan_time_str = c.fetchone()[0]
        
        if last_scan_time_str:
            last_scan_time = datetime.fromisoformat(last_scan_time_str)
        else:
            last_scan_time = None
        rounded_last_scan_time = last_scan_time.strftime('%H:%M:%S')
        conn.commit()
                
        if free_draws <=0:
            keyboard = InlineKeyboardMarkup()
            buy = InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Åüí∞", callback_data='balance')
            back = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data='back')
            keyboard.add(buy)
            keyboard.add(back)
            await bot.send_message(chat_id, f'''       
–ò—Å—á–µ—Ä–ø–∞–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç, –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞ –≤ {rounded_last_scan_time}
–∏–ª–∏
–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ 0.1$ —á–µ—Ä–µ–∑ CryptoBot''', reply_markup=keyboard)
            return
        else:
                with open('Image source/TON/ya_example.png', 'rb') as photo_file:
                    await bot.send_photo(
                        chat_id, 
                        photo_file, 
                        caption=f'''
                        –û—Ç–ø—Ä–∞–≤—å –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
<code>20:18</code>
<code>Toncoin</code>
<code>–í–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ</code><i>(–ú–∞–∫—Å. 160 —Å–∏–º–≤–æ–ª–æ–≤)</i>  
<code>–í–∞—à–∞ —Å—Å—ã–ª–∫–∞</code>  
                    ''', 
                    parse_mode='HTML'  # Directly use Telegram's parse_mode
                )
        
    
    elif call.data == 'balance':
        keyboard = InlineKeyboardMarkup(row_width=5) 
        buttons = [InlineKeyboardButton(text=str(i), callback_data=f'balance_{i}') for i in range(1, 11)]
        keyboard.add(*buttons) 
        keyboard.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back'))  # Add the "–ù–∞–∑–∞–¥" button at the end
        await bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text='–í–≤–µ–¥–∏ –∫–æ–ª-–≤–æ –æ—Ç—Ä–∏—Å–æ–≤–æ–∫:', reply_markup=keyboard)
    elif call.data.startswith('balance_'):
        num_draws = int(call.data.split('_')[1])
        amount = 0.1 * num_draws

        c.execute("SELECT free_draws FROM users WHERE id=?", (chat_id,))
        free_draws = c.fetchone()[0]

        payment_url, invoice_id = await create_invoice(amount)
        await main2()
        await bot.delete_message(chat_id=chat_id, message_id=call.message.message_id)
        if payment_url:
            markup = InlineKeyboardMarkup(row_width=5)

            await bot.send_message(chat_id, f'–û—Ç—Ä–∏—Å–æ–≤–æ–∫ —Å–µ–π—á–∞—Å: {free_draws}\n–°—Å—ã–ª–∫–∞: {payment_url}')
            if invoice_id:
                payment_status = await check_invoice_payment(invoice_id)
                if payment_status:
                    emoji_message = await bot.send_message(chat_id, "üí∞")

                    c.execute("UPDATE users SET free_draws = ? WHERE id = ?", (free_draws + num_draws, chat_id))
                    conn.commit()
                    
                    await asyncio.sleep(5)
                    await bot.delete_message(chat_id=emoji_message.chat.id, message_id=emoji_message.message_id)
                    await bot.send_message(chat_id, "–ß–µ–∫ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω.‚úÖ")
                    


                    user_info = await bot.get_chat(chat_id)
                    username = user_info.username

                    await post_to_channel(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} ({chat_id}) —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∏–∑–≤–µ–ª –æ–ø–ª–∞—Ç—É.", username, chat_id, amount)
                    
                    button = InlineKeyboardButton(text="TON", callback_data='TON')
                    button1 = InlineKeyboardButton(text="üíµ–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data='balance')
                    markup.row(button)
                    markup.row(button1)
                    await bot.send_message(chat_id, "–ù–∞–∂–º–∏, —á—Ç–æ–±—ã –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å", reply_markup=markup)
                else:
                    await bot.send_message(chat_id, "–ß–µ–∫ –Ω–µ –æ–ø–ª–∞—á–µ–Ω.‚ùå")
            else:
                await bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —á–µ–∫–∞.‚ùå")

                
                
    elif call.data == 'check_subscription':
        if await check_subscription(chat_id):
            markup = InlineKeyboardMarkup()
            button = InlineKeyboardButton(text="TON", callback_data='TON')
            button1 = InlineKeyboardButton(text="üíµ–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data='balance')
            markup.row(button)
            markup.row(button1)
            await bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text='–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.', reply_markup=markup)
        else:
            await bot.send_message(chat_id, '–í—ã –≤—Å–µ –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.', reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª', url=f'https://t.me/{CHANNEL_USERNAME[1:]}'),
                InlineKeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data='check_subscription')
            ))
    

    elif call.data == 'TON':
        c.execute("SELECT free_draws FROM users WHERE id=?", (chat_id,))
        free_draws = c.fetchone()[0]
        
        c.execute("SELECT last_scan_time FROM users WHERE id=?", (chat_id,))
        last_scan_time_str = c.fetchone()[0]
        conn.commit()
       

        if free_draws <=0:
            keyboard = InlineKeyboardMarkup()
            buy = InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data='balance')
            back = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data='back')
            keyboard.add(buy)
            keyboard.add(back)
            await bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, 
text=f'''
–ò—Å—á–µ—Ä–ø–∞–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç, –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞ –≤ {last_scan_time_str}
–∏–ª–∏
–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ 0.1$ —á–µ—Ä–µ–∑ CryptoBot''', reply_markup=keyboard)
    
            return
        else:
            with open('Image source/TON/ya_example.png', 'rb') as photo_file:
                await bot.send_photo(
                    chat_id, 
                    photo_file, 
                    caption=f'''
                    –û—Ç–ø—Ä–∞–≤—å –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
<code>20:18</code>
<code>Toncoin</code>
<code>–í–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ</code><i>(–ú–∞–∫—Å. 160 —Å–∏–º–≤–æ–ª–æ–≤)</i> 
<code>–í–∞—à–∞ —Å—Å—ã–ª–∫–∞</code>     
                    ''', 
                    parse_mode='HTML'  # Directly use Telegram's parse_mode
                )

    elif call.data == 'back':
        if await check_subscription(chat_id):
                c.execute("SELECT free_draws FROM users WHERE id=?", (chat_id,))
                free_draws = c.fetchone()[0]
                markup = InlineKeyboardMarkup()
                button = InlineKeyboardButton(text="TON", callback_data='TON')
                button1 = InlineKeyboardButton(text="üíµ–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data='balance')
                markup.row(button)
                markup.row(button1)
                await bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text=f'''
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Ä–∏—Å–æ–≤–æ–∫: {free_draws}

–í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é –Ω–∏–∂–µ:''', reply_markup=markup)
                
        else:
            # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
            await chat_id.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.', reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª', url=f'https://t.me/{CHANNEL_USERNAME[1:]}'),
                InlineKeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data='check_subscription')
            ))
        
    
    
    
@dp.message_handler(content_types=types.ContentType.PHOTO)
async def process_qr(message: types.Message):
    global client_session, last_scan_time  # –û–±—ä—è–≤–∏—Ç—å last_scan_time –∫–∞–∫ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    try:
        current_time = datetime.now()

        # –ü–æ–ª—É—á–∏—Ç—å free_draws
        c.execute("SELECT free_draws FROM users WHERE id=?", (message.chat.id,))
        result = c.fetchone()
        if result:
            free_draws = result[0]
        else:
            await bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫.')
            return

        if free_draws <= 0:
            c.execute("SELECT last_scan_time FROM users WHERE id=?", (message.chat.id,))
            last_scan_time_str = c.fetchone()[0]
            conn.commit()
            
            keyboard = InlineKeyboardMarkup()
            buy = InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data='balance')
            back = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data='back')
            keyboard.add(buy)
            keyboard.add(back)
            
            c.execute("SELECT free_draws FROM users WHERE id=?", (message.chat.id,))
            free_draws = c.fetchone()[0]
            conn.commit()
            
            await bot.send_message(message.chat.id, f'''
–ò—Å—á–µ—Ä–ø–∞–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç, –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞ –≤ {last_scan_time_str}
–∏–ª–∏
–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ 0.1$ —á–µ—Ä–µ–∑ CryptoBot''', reply_markup=keyboard)
            return
        
        if message.chat.id not in user_data:
            await bot.send_message(message.chat.id, '–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.')
            return

        file_info = await bot.get_file(message.photo[-1].file_id)
        downloaded_file = await bot.download_file(file_info.file_path)

        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å QR-–∫–æ–¥
        qr_path = 'Image source/TON/qr_image.png'
        with open(qr_path, 'wb') as new_file:
            new_file.write(downloaded_file.read())

        # –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        data = user_data[message.chat.id]
        time = data['time']
        coin = data['coin']
        pricetime = data['pricetime']
        x = data['x']
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –∑–∞–º–µ–Ω–∏—Ç—å –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—É –º–æ–Ω–µ—Ç—ã
        coin_short = abbreviations.get(coin, coin)

        # –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ–Ω –∏ QR-–∫–æ–¥
        tink = Image.open("Image source/TON/ya_balance.png").convert("RGBA")
        qr = Image.open(qr_path).convert("RGBA")
        qr = qr.resize((360, 350))  # –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä QR-–∫–æ–¥–∞

        # –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∏–∫–æ–Ω–∫–∏
        icon = Image.open("Image source/TON/icon.png").convert("RGBA")
        icon_size = (80, 80)  # –†–∞–∑–º–µ—Ä –∏–∫–æ–Ω–∫–∏
        icon = icon.resize(icon_size)

        # –ù–∞–ª–æ–∂–∏—Ç—å –∏–∫–æ–Ω–∫—É –Ω–∞ QR-–∫–æ–¥
        qr.paste(icon, ((qr.width - icon.width) // 2, (qr.height - icon.height) // 2), icon)

        # –ó–∞–≥—Ä—É–∑–∏—Ç—å —à—Ä–∏—Ñ—Ç—ã
        font_time = ImageFont.truetype("Fonts/SF-Pro-Display-Bold.otf", 24)
        font_coin = ImageFont.truetype("Fonts/Inter-Bold.ttf", 32)
        font_pricetime = ImageFont.truetype("Fonts/Inter-Regular.ttf", 24)
        font_x = ImageFont.truetype("Fonts/Inter-Medium.ttf", 25)
        d = ImageDraw.Draw(tink)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
        alpha = 130  # –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ (0-255)

        
        pricetime_lines = pricetime.split()
        max_chars_per_line = 20  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ —Å—Ç—Ä–æ–∫–µ
        lines = []
        current_line = []
        for word in pricetime_lines:
            if len(" ".join(current_line + [word])) <= max_chars_per_line:
                current_line.append(word)
            else:
                lines.append(" ".join(current_line))
                current_line = [word]
        if current_line:
            lines.append(" ".join(current_line))

        # –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        text_image = Image.new("RGBA", tink.size, (255, 255, 255, 0))
        d_text = ImageDraw.Draw(text_image)

        # –†–∞–∑–¥–µ–ª–∏—Ç—å –∏ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –∏–∑ lines
        y_text_position = 275
        for line in lines:
            line_width, _ = d_text.textsize(line, font=font_pricetime)
            line_x_position = (tink.width - line_width) // 2
            d_text.text((line_x_position, y_text_position), line, font=font_pricetime, fill=(255, 255, 255, alpha))
            y_text_position += font_pricetime.getsize(line)[1] + 3
        
        
        
        # –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —à–∏—Ä–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ "X"
        text_width, _ = d.textsize(x, font=font_x)

        # –†–∞—Å—Å—á–∏—Ç–∞—Ç—å x-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        x_text_x_position = (tink.width - text_width) // 2

        # –ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç "X" —Å –Ω–æ–≤–æ–π x-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ–π
        d.text((x_text_x_position, 910), x, font=font_x, fill=(0, 0, 0, 255))

        # –ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
        text_width_coin, _ = d.textsize(coin, font=font_coin)
        x_coin_position = (tink.width - text_width_coin) // 2
        d.text((46, 21), time, font=font_time, fill=(255, 255, 255, 255))
        d.text((x_coin_position, 233), coin, font=font_coin, fill=(255, 255, 255, 255))

        # –°–æ–≤–º–µ—Å—Ç–∏—Ç—å –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –æ—Å–Ω–æ–≤–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        combined = Image.alpha_composite(tink, text_image)

        # –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è QR-–∫–æ–¥–∞
        center_x = (combined.width - qr.width) // 2

        # –î–æ–±–∞–≤–∏—Ç—å QR-–∫–æ–¥ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        combined.paste(qr, (center_x, 500), qr)
        
        combined.save('Image source/TON/ton.png')
        combined.save('Image source/TON/ton.pdf')
        photo_file = types.InputFile("Image source/TON/ton.png")
        
        pdf_path = "Image source/TON/ton.pdf"
        pdf_file = types.InputFile(pdf_path)
        
        markup = InlineKeyboardMarkup()
        button = InlineKeyboardButton(text="–°–¥–µ–ª–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data='Try')
        markup.row(button)

        # –û–±–Ω–æ–≤–∏—Ç—å free_draws –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        c.execute("UPDATE users SET free_draws = ? WHERE id = ?", (free_draws - 1, message.chat.id))
        conn.commit()
        
        await bot.send_document(message.chat.id, pdf_file)
        await bot.send_photo(message.chat.id, photo_file, reply_markup=markup)
        

        os.remove('Image source/TON/ton.pdf')
        os.remove('Image source/TON/ton.png')
         
    except Exception as e:
        await bot.send_message(message.chat.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')
    
